# script that pulls data from several sources and generate vulnerability breakdown for subnational SEIR model

import os
import glob
import argparse

import geopandas as gpd
import rasterio
from rasterio.merge import merge
from rasterio.warp import calculate_default_transform, reproject
from rasterio.plot import show

import utils

INPUT_DIR = 'Inputs'
OUTPUT_DIR = 'Outputs'

# input shapefile downloaded from https://data.humdata.org/dataset/afg-admin-boundaries
INPUT_SHP = 'Inputs/Shapefiles/afg_admbnda_adm2_agcho_20180522/afg_admbnda_adm2_agcho_20180522.shp'
OUTPUT_SHP = 'Outputs/Vulnerability/AFG_Vulnerabilities.shp'
dir_path = os.path.dirname(os.path.realpath(__file__))

# GHS DATA
URL = "https://cidportal.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_SMOD_POP_GLOBE_R2019A/" \
      "GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K/V2-0/tiles/GHS_SMOD_POP2015_GLOBE_R2019A_54009_1K_V2_0_{column}_{row}.zip"
COLUMN_ROW_PAIRS = [(23, 4), (23, 5), (24, 4), (24, 5)]
GHS_DIR = os.path.join(INPUT_DIR, 'GHS')
OUTPUT_GHS = 'SMOD_pop2015_1km_mosaic.tif'


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-g', '--download-ghs', action='store_true',
                        help='Download the GHS data')
    return parser.parse_args()


def main(download_ghs=False):
    # Download the tiles
    if download_ghs:
        get_ghs_data()
    ghs = rasterio.open(os.path.join(GHS_DIR, OUTPUT_GHS))
    # src_crs = {'init': 'ESRI:54009'}
    # dst_crs = {'init': 'EPSG:4326'}
    # dest = calculate_default_transform(src_crs, dst_crs, ghs.height, ghs.width,
    #                                    left=ghs.bounds[0],
    #                                    bottom=ghs.bounds[1],
    #                                    right=ghs.bounds[2],
    #                                    top=ghs.bounds[3])
    # reproject(
    #     ghs,
    #     dest,
    #     src_crs=src_crs,
    #     dst_crs=dst_crs
    # )

    # adding food security data
    # adding urban/rural disaggregation data using JRC GHSL input
    boundaries = gpd.read_file('{}/{}'.format(dir_path,INPUT_SHP))


def get_ghs_data():
    download_dir = os.path.join(GHS_DIR, 'zip')
    for column, row in COLUMN_ROW_PAIRS:
        zip_filename = os.path.join(download_dir, f'SMOD_pop2015_1km_{column}_{row}.zip')
        utils.download_url(URL.format(column=column, row=row), zip_filename)
        utils.unzip(zip_filename, download_dir)
    # Make a mosaic
    files_to_mosaic = [rasterio.open(f) for f in glob.glob(os.path.join(download_dir, '*.tif'))]
    print(f'Making mosiac of {len(files_to_mosaic)} files')
    mosaic, out_trans = merge(files_to_mosaic)
    out_meta = files_to_mosaic[0].meta.copy()
    out_meta.update({"driver": "GTiff",
                     "height": mosaic.shape[1],
                     "width": mosaic.shape[2],
                     "transform": out_trans})
    output_filepath = os.path.join(GHS_DIR, OUTPUT_GHS)
    with rasterio.open(output_filepath, "w", **out_meta) as dest:
        dest.write(mosaic)
    print(f'Wrote file to {output_filepath}')


if __name__ == '__main__':
    args = parse_args()
    main(download_ghs=args.download_ghs)
